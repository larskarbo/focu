{"version":3,"sources":["App.js","serviceWorker.js","index.js","connect.png"],"names":["scopes","Main","play","s","setState","playing","startTime","Date","now","pause","state","token","localStorage","getItem","loggedIn","progressMS","timerStarted","qs","parse","window","location","hash","access_token","setItem","Spotify","setAccessToken","setInterval","getMyCurrentPlayingTrack","err","data","console","error","currentTrack","progress_ms","Grommet","full","theme","global","font","family","background","Box","align","style","minHeight","width","pad","this","Image","onClick","a","open","join","origin","src","connect","date","endTime","onComplete","direction","item","album","images","url","flex","justify","Text","weight","name","artists","Pause","Play","Next","log","skipToNext","duration_ms","height","Button","primary","label","React","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.a76ecdde.chunk.js","sourcesContent":["import React from \"react\";\nimport connect from \"./connect.png\";\nimport \"./App.css\";\nimport Spotify from \"spotify-web-api-js\";\nimport { Grommet, Box,\n  Button, Image, Text } from \"grommet\";\nimport qs from \"query-string\";\n\nimport TimePicker from \"increaser-timepicker\";\nimport {\n  Slider,\n  FormattedTime,\n  PlayerIcon\n} from \"react-player-controls\";\n\nimport Countdown from \"react-countdown-now\";\nconst scopes = [\n  \"user-read-currently-playing\",\n  \"user-read-playback-state\",\n  \"user-modify-playback-state\"\n];\nconst theme = {\n  actionColor: \"rgba(231, 76, 60,.9)\",\n  selectColor: \"#ecf0f1\",\n  selectTextColor: \"#34495e\",\n  circleColor: \"rgba(255, 255, 255, 0.15)\"\n};\n\nconst Container = ({ children }) => (\n  <div style={{ height: \"100vh\", width: \"100%\" }}>{children}</div>\n);\nclass Main extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      token: localStorage.getItem(\"token\"),\n      loggedIn: false,\n      progressMS: 0,\n      playing: true,\n      timerStarted: false,\n      startTime: Date.now()\n    };\n\n    if (qs.parse(window.location.hash).access_token) {\n      localStorage.setItem(\n        \"token\",\n        qs.parse(window.location.hash).access_token\n      );\n      this.state.token = qs.parse(window.location.hash).access_token;\n    }\n\n    var s = new Spotify();\n    this.s = s;\n    s.setAccessToken(this.state.token);\n\n    setInterval(() => {\n      s.getMyCurrentPlayingTrack((err, data) => {\n        if (err) console.error(err);\n        else {\n          this.setState({\n            currentTrack: data,\n            progressMS: data.progress_ms\n          });\n        }\n      });\n    }, 1000);\n\n    setInterval(() => {\n      if (this.state.playing) {\n        this.setState(state => ({\n          progressMS: state.progressMS + 100\n        }));\n      }\n    }, 100);\n  }\n  componentDidMount() {\n    // s.getArtistAlbums(\"43ZHCT0cAZBISjO8DG9PnE\", function(err, data) {\n    //   if (err) console.error(err);\n    //   else console.log(\"Artist albums\", data);\n    // });\n    // s.seek(100);\n    // s.play();\n    // setInterval(() => {\n    //   s.seek(0);\n    // }, 10 * 1000);\n  }\n\n  play = () => {\n    this.s.play();\n    this.setState({\n      playing: true,\n      startTime: Date.now(),\n    });\n  };\n\n  pause = () => {\n    this.s.pause();\n    this.setState({\n      playing: false\n    });\n  };\n\n  render() {\n    const myTheme = {\n      global: {\n        font: {\n          family: \"Roboto\"\n        },\n        background: \"black\"\n      }\n    };\n\n    return (\n      <Grommet full theme={myTheme}>\n        <Box\n          align=\"center\"\n          background=\"black\"\n          full\n          style={{ minHeight: \"100vh\" }}\n        >\n          <Box width=\"500px\" pad=\"large\" align=\"center\" background=\"#323848\">\n            {!this.state.token && (\n              <Image\n                width=\"400px\"\n                onClick={a => {\n                  window.open(\n                    \"https://accounts.spotify.com/authorize\" +\n                      \"?response_type=token\" +\n                      \"&client_id=\" +\n                      \"77731534240f4a23b0428502d3a25243\" +\n                      (scopes ? \"&scope=\" + scopes.join(\"%20\") : \"\") +\n                      \"&redirect_uri=\" +\n                      window.location.origin,\"_self\"\n                  );\n                }}\n                src={connect}\n              ></Image>\n            )}\n\n            {this.state.timerStarted ? (\n              <>\n                <Box>\n                  <Countdown\n                    date={this.state.endTime}\n                    onComplete={() => {\n                      this.s.pause();\n                    }}\n                  />\n                </Box>\n\n                {this.state.currentTrack && (\n                  <Box\n                    direction=\"row\"\n                    style={{\n                      width: \"100%\"\n                    }}\n                    background=\"white\"\n                  >\n                    <Box>\n                      <Image\n                        width=\"100\"\n                        src={this.state.currentTrack.item.album.images[1].url}\n                      ></Image>\n                    </Box>\n                    <Box flex=\"grow\">\n                      <Box\n                        flex=\"grow\"\n                        pad=\"small\"\n                        align=\"center\"\n                        justify=\"between\"\n                        direction=\"row\"\n                      >\n                        <Box>\n                          <Text weight=\"bold\">\n                            {this.state.currentTrack.item.name}\n                          </Text>\n                          <Text weight={300}>\n                            {this.state.currentTrack.item.artists[0].name}\n                          </Text>\n                        </Box>\n                        <Box direction=\"row\">\n                          {!this.state.playing ? (\n                            <PlayerIcon.Play width=\"32\" onClick={this.play} />\n                          ) : (\n                            <PlayerIcon.Pause width=\"32\" onClick={this.pause} />\n                          )}\n                          <PlayerIcon.Next\n                            width=\"32\"\n                            onClick={() => {\n                              console.log(this.s.skipToNext());\n                            }}\n                          />\n                        </Box>\n                      </Box>\n                      <div\n                        style={{\n                          width:\n                            (this.state.progressMS /\n                              this.state.currentTrack.item.duration_ms) *\n                              100 +\n                            \"%\",\n                          background: \"green\",\n                          height: \"5px\"\n                        }}\n                      ></div>\n                    </Box>\n                  </Box>\n                )}\n              </>\n            ) : (\n              <Box>\n                <Text>Hei,</Text>\n                  <Button primary onClick={() => {\n                    this.play()\n                    this.setState({\n                      timerStarted: true,\n                      // endTime: Date.now() + 25000 * 60\n                      endTime: Date.now() + 10000\n                    })\n                 }} label=\"start 10 sekund fokus\"/>\n              </Box>\n            )}\n          </Box>\n        </Box>\n      </Grommet>\n    );\n  }\n}\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/connect.7326f7be.png\";"],"sourceRoot":""}